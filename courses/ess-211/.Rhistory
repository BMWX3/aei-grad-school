per <- 1 / ssp$freq[ssp$spec == max(ssp$spec)]
# least squares fit the data
linearModel <- lm(y ~ sin(2 * pi / per * x) + cos(2 * pi / per * x))
per
if (NA == NA) print("na")
g = NA
if (g == NA) print("na")
if (is.na(NA)) print("na")
plot(fitted(linearModel, x))
plot(y, x))
plot(y, x)
plot(x, y)
lines(fitted(linearModel), col = 'blue')
lines(fitted(linearModel), col = 'Blue')
lines(fitted(linearModel))
lines(fitted(linearModel) ~ x)
predict(linearModel)
predict(linearModel, dframe$Year)
?predict
predict(linearModel, dframe)
linearModel <- lm(dframe$UnemploymentRate[unemployment.years] ~ sin(2 * pi / per * dframe$Year[unemployment.years]) + cos(2 * pi / per * dframe$Year[unemployment.years]))
predict(linearModel, dframe)
if (is.na(per){
per <- 1 / ssp$freq[ssp$spec == max(ssp$spec)]
}
unemployment.framework3 <- function(dframe, per = NA){
# get basic unemployment info
unemployment.years <- which(dframe$UnemploymentRate < 1.)
unemployment.yearsToModel <- is.na(dframe$UnemploymentRate)
# set some vars so they are less arduous to read later
y <- dframe$UnemploymentRate[unemployment.years]
x <- dframe$Year[unemployment.years]
# calculate the spectrum and period of the data, if not set
ssp <- spectrum(y, plot=FALSE)
if (is.na(per)){
per <- 1 / ssp$freq[ssp$spec == max(ssp$spec)]
}
# least squares fit the data
linearModel <- lm(dframe$UnemploymentRate[unemployment.years] ~ sin(2 * pi / per * dframe$Year[unemployment.years]) + cos(2 * pi / per * dframe$Year[unemployment.years]))
}
linearModel
dframe = dframe[unemployment.years,]
linearModel <- lm(dframe$UnemploymentRate ~ sin(2 * pi / per * dframe$Year) + cos(2 * pi / per * dframe$Year))
predict(linearModel, yearly)
linearModel
dframe = yearly
y <- dframe$UnemploymentRate[unemployment.years]
x <- dframe$Year[unemployment.years]
linearModel <- lm(y ~ sin(2 * pi / per * x) + cos(2 * pi / per * x))
predict(linearModel, data.frame(x = dframe$Year, y = dframe$UnemploymentRate))
predicted <- predict(linearModel, data.frame(x = dframe$Year, y = dframe$UnemploymentRate))
framework2 <- dframe$UnemploymentRate
framework3 <- dframe$UnemploymentRate
framework3[unemployment.yearsToModel] <- precited[unemployment.yearsToModel] + noise
framework3[unemployment.yearsToModel] <- predicted[unemployment.yearsToModel] + noise
framework3
plot(framework3
)
plot(framework3)
plot(yearly$Year, framework3, type = 'l')
View(enlistment)
View(demographics)
unemployment.framework3 <- function(dframe, sd, per = NA){
# get basic unemployment info
unemployment.years <- which(dframe$UnemploymentRate < 1.)
unemployment.yearsToModel <- is.na(dframe$UnemploymentRate)
# set some vars so they are less arduous to read later
y <- dframe$UnemploymentRate[unemployment.years]
x <- dframe$Year[unemployment.years]
# calculate the spectrum and period of the data, if not set
ssp <- spectrum(y, plot=FALSE)
if (is.na(per)){
per <- 1 / ssp$freq[ssp$spec == max(ssp$spec)]
}
# least squares fit the data
linearModel <- lm(y ~ sin(2 * pi / per * x) + cos(2 * pi / per * x))
# generate some noise
noise <- rnorm(sum(unemployment.yearsToModel), sd = sd)
# apply the fit to the data that needs to be modeled
predicted <- predict(linearModel, data.frame(x = dframe$Year, y = dframe$UnemploymentRate))
framework3 <- dframe$UnemploymentRate
framework3[unemployment.yearsToModel] <- predicted[unemployment.yearsToModel] + noise
return(framework3)
}
framework3 <- unemployment.framework3(yearly, unemployment.sd)
growth.exponential2 <- function(x, y, degree=2){
model <- lm(y ~ poly(x, degree = degree))
return(model)
}
vse = growth.exponential2(yearly$Year[fitYears], yearly$VeteranSpending.BUSD[fitYears], degree = 2)
vpr = predict(vse, x = yearly$Year)
vpr
vetSpending.predicted.exp
yearly$Year
vse
vetSpending.exponential
vpr = predict(vse, data.frame(x = yearly$Year))
vpr
vetSpending.exponential2 <- growth.exponential2(yearly$Year[fitYears], yearly$VeteranSpending.BUSD, degree = 2)
vetSpending.exponential2 <- growth.exponential2(yearly$Year[fitYears], yearly$VeteranSpending.BUSD[fitYears], degree = 2)
vetSpending.predicted.exp2 <- predict(vetSpending.exponential2, data.frame(x = yearly))
vetSpending.predicted.exp2 <- predict(vetSpending.exponential2, data.frame(x = yearly$Year))
vetSpending.exponential <- vetGrowth.exponential(yearly[fitYears,], degree = 2)
vetSpending.predicted.exp <- predict(vetSpending.exponential, yearly)
vetSpending.predicted.exp
vetSpending.predicted.exp2
growth.logistic2 <- function(x, y, phi1, phiIndex){
# we're going to use the index provided to insert the phi1 value
#  so the logistic growth fits to the asymptote
y[phiIndex:nrow(y)] <- phi1
# we're going to have to guess the initial parameters for
#  phi2 and phi3, which we will do using a logit transform
coefs <- coef(lm(logit(y / phi1) ~ x))
phi2 <- coefs[1]
phi3 <- coefs[2]
# then we'll perform a non-linear least-squares fit to the data
model <- nls(y ~ (phi1 / (1 + exp(-(phi2 + phi3 * x)))),
start = list(phi1 = phi1, phi2 = phi2, phi3 = phi3))
return(model)
}
vetSpending.logistic2 <- growth.logistic2(yearly$Year[fitYears], yearly$VeteranSpending.BUSD[fitYears], maxSpending.vet, nrow(yearly))
yearly$Year[fitYears]
yearly$VeteranSpending.BUSD[fitYears]
vetSpending.logistic2 <- growth.logistic2(yearly$Year, yearly$VeteranSpending.BUSD, maxSpending.vet, nrow(yearly))
x = yearly$Year
y = yearly$VeteranSpending.BUSD
y
nrow(y)
length(y)
growth.logistic2 <- function(x, y, phi1, phiIndex){
# we're going to use the index provided to insert the phi1 value
#  so the logistic growth fits to the asymptote
y[phiIndex:length(y)] <- phi1
# we're going to have to guess the initial parameters for
#  phi2 and phi3, which we will do using a logit transform
coefs <- coef(lm(logit(y / phi1) ~ x))
phi2 <- coefs[1]
phi3 <- coefs[2]
# then we'll perform a non-linear least-squares fit to the data
model <- nls(y ~ (phi1 / (1 + exp(-(phi2 + phi3 * x)))),
start = list(phi1 = phi1, phi2 = phi2, phi3 = phi3))
return(model)
}
vetSpending.logistic2 <- growth.logistic2(yearly$Year, yearly$VeteranSpending.BUSD, maxSpending.vet, nrow(yearly))
vetSpending.predicted.log2 <- predict(vetSpending.logistic2, data.frame(x = yearly$Year))
vetSpending.predicted.log
vetSpending.predicted.log2
vetSpending.logistic <- vetGrowth.logistic(yearly, maxSpending.vet, nrow(yearly))
vetSpending.predicted.log <- predict(vetSpending.logistic, yearly)
vetSpending.logistic2 <- growth.logistic2(yearly$Year, yearly$VeteranSpending.BUSD, maxSpending.vet, nrow(yearly))
vetSpending.predicted.log2 <- predict(vetSpending.logistic2, data.frame(x = yearly$Year))
vetSpending.predicted.log
vetSpending.predicted.log2
milSpending.exponential <- growth.exponential(yearly$Year[fitYears], yearly$MilitarySpending.BUSD[fitYears], degree = 2)
growth.exponential <- function(x, y, degree=2){
model <- lm(y ~ poly(x, degree = degree))
return(model)
}
#  x is the response variable, in this case, time
growth.logistic <- function(x, y, phi1, phiIndex){
# we're going to use the index provided to insert the phi1 value
#  so the logistic growth fits to the asymptote
y[phiIndex:length(y)] <- phi1
# we're going to have to guess the initial parameters for
#  phi2 and phi3, which we will do using a logit transform
coefs <- coef(lm(logit(y / phi1) ~ x))
phi2 <- coefs[1]
phi3 <- coefs[2]
# then we'll perform a non-linear least-squares fit to the data
model <- nls(y ~ (phi1 / (1 + exp(-(phi2 + phi3 * x)))),
start = list(phi1 = phi1, phi2 = phi2, phi3 = phi3))
return(model)
}
milSpending.exponential <- growth.exponential(yearly$Year[fitYears], yearly$MilitarySpending.BUSD[fitYears], degree = 2)
milSpending.predicted.exp <- predict(milSpending.exponential, data.frame(x = yearly$Year))
ylab <- "Total Military Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (exponential) Military Spending"
legend <- c("Actual Military Spending", "Modeled Military Spending", paste("RMSE:", format(rmse.milSpending.exp, nsmall = 2)))
ylim <- c(min(yearly$MilitarySpending.BUSD, milSpending.predicted.exp, na.rm = TRUE),
max(yearly$MilitarySpending.BUSD, milSpending.predicted.exp, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$MilitarySpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, milSpending.predicted.exp, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
fedSpending.logistic <- growth.logistic(yearly$Year, yearly$FedSpending.BUSD, maxSpending.fed, nrow(yearly))
fedSpending.predicted.log <- predict(fedSpending.logistic, data.frame(x = yearly$FedSpending.BUSD))
rmse.fedSpending.log <- sqrt(mean(residuals(fedSpending.logistic)^2))
ylab <- "Total Federal Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (logistic) Federal Spending"
legend <- c("Actual Federal Spending", "Modeled Federal Spending", paste("RMSE:", format(rmse.fedSpending.log, nsmall = 2)))
ylim <- c(min(yearly$FedSpending.BUSD, fedSpending.predicted.log, na.rm = TRUE),
max(yearly$FedSpending.BUSD, fedSpending.predicted.log, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$FedSpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, fedSpending.predicted.log, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
fedSpending.logistic <- growth.logistic(yearly$Year, yearly$FedSpending.BUSD, maxSpending.fed, nrow(yearly))
fedSpending.predicted.log <- predict(fedSpending.logistic, data.frame(x = yearly$FedSpending.BUSD))
fedSpending.logistic
yearly$FedSpending.BUSD
fedSpending.predicted.log <- predict(fedSpending.logistic, data.frame(x = yearly$Year))
# calculate rmse for logistic growth
rmse.fedSpending.log <- sqrt(mean(residuals(fedSpending.logistic)^2))
# plot the output
ylab <- "Total Federal Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (logistic) Federal Spending"
legend <- c("Actual Federal Spending", "Modeled Federal Spending", paste("RMSE:", format(rmse.fedSpending.log, nsmall = 2)))
ylim <- c(min(yearly$FedSpending.BUSD, fedSpending.predicted.log, na.rm = TRUE),
max(yearly$FedSpending.BUSD, fedSpending.predicted.log, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$FedSpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, fedSpending.predicted.log, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
fedSpending.exponential <- growth.exponential(yearly$Year[fitYears], yearly$FedSpending.BUSD[fitYears], degree = 2)
fedSpending.predicted.exp <- predict(fedSpending.exponential, data.frame(x = yearly$Year))
# calculate rmse for exponential growth
rmse.fedSpending.exp <- sqrt(mean(residuals(fedSpending.exponential)^2))
# plot the output
ylab <- "Total Federal Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (exponential) Federal Spending"
legend <- c("Actual Federal Spending", "Modeled Federal Spending", paste("RMSE:", format(rmse.fedSpending.exp, nsmall = 2)))
ylim <- c(min(yearly$FedSpending.BUSD, fedSpending.predicted.exp, na.rm = TRUE),
max(yearly$FedSpending.BUSD, fedSpending.predicted.exp, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$FedSpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, fedSpending.predicted.exp, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
# next, we'll look at what logistic growth in federal spending looks like.
#  we're going to set the ceiling of federal spending to that
#  specified in the parameters above, suggesting that at the final year we model,
#  we will be spending the max amount. we'll change this as we do sensitivity analysis, etc.
fedSpending.logistic <- growth.logistic(yearly$Year, yearly$FedSpending.BUSD, maxSpending.fed, nrow(yearly))
fedSpending.predicted.log <- predict(fedSpending.logistic, data.frame(x = yearly$Year))
# calculate rmse for logistic growth
rmse.fedSpending.log <- sqrt(mean(residuals(fedSpending.logistic)^2))
# plot the output
ylab <- "Total Federal Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (logistic) Federal Spending"
legend <- c("Actual Federal Spending", "Modeled Federal Spending", paste("RMSE:", format(rmse.fedSpending.log, nsmall = 2)))
ylim <- c(min(yearly$FedSpending.BUSD, fedSpending.predicted.log, na.rm = TRUE),
max(yearly$FedSpending.BUSD, fedSpending.predicted.log, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$FedSpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, fedSpending.predicted.log, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
# set working directory
setwd("~/src/aei-grad-school/courses/ess-211/")
# load ESS-211 functions
source("ESS-211-Functions.R")
source("ESS-211-DemilitarizationFunctions.R")
# load the raw data to a data frame
enlistment <- read.csv('demilitarization_project/Enlistment.csv', header = TRUE)
demographics <- read.csv('demilitarization_project/Demographics.csv', row.names = 1, header = TRUE)
yearly <- read.csv('demilitarization_project/YearlyData.csv', header = TRUE)
#############################
# set parameter and variable values we'll use later in modeling
# set the years we'll model until
endModelYear <- 2050
startModelYear <- max(yearly$Year) + 1
startYear <- min(yearly$Year)
endYear <- max(yearly$Year)
# set the limits on spending
maxSpending.fed <- 8000 # in billions of USD
maxSpending.mil <- 800 # in billions of USD
maxSpending.vet <- maxSpending.mil # assumes max budget for vets will be at least how much we spend on active military
# set plotting parameters
colDem <- add.alpha("Blue", 0.6)
colRep <- add.alpha("Red", 0.6)
colFed <- add.alpha("Purple", 0.8)
colMil <- add.alpha("Orange", 0.8)
colPred <- add.alpha("Dark Green", 0.8)
colReal <- add.alpha("Black", 0.8)
#############################
# create some exploratory plots
# number of unique conflicts per year
cols <- rep("", nrow(yearly))
cols[yearly$PresidentialParty == "Republican"] = colRep
cols[yearly$PresidentialParty == "Democrat"] = colDem
ylab <- "Number of Unique Conflicts"
xlab <- "Year"
title <- "Unique Military Conflicts per Year"
barplot(yearly$nConflicts, col = add.alpha(cols, 0.6), names.arg = yearly$Year, ylab = ylab, xlab = xlab, main = title)
# average conflicts by party
cols <- c(colRep, colDem)
xlab <- c("Republican", "Democrat")
ylab <- "Number of Unique Conflicts per Year"
title <- "Unique Military Conflicts per Year by Presidential Party"
conflictList <- list(yearly$nConflicts[yearly$PresidentialParty == "Republican"], yearly$nConflicts[yearly$PresidentialParty == "Democrat"])
boxplot(conflictList, col = add.alpha(cols, 0.6), names = xlab, main = title, ylab = ylab)
# comparing enlistment and total US population
cols <- c(colFed, colMil)
xlab <- "Year"
ylabPop <- "US Population (millions of people)"
ylabEnlist <- "Military Enlistment (millions of people)"
title <- "US and Military Populations"
lwd <- c(3, 3)
par(mar = c(5,5,2,5))
with(yearly, plot(Year, TotalPopulation, type = 'l', col = cols[1], xlab = xlab, ylab = ylabPop, lwd = lwd[1], main = title))
par(new = TRUE)
with(yearly, plot(Year, (TotalEnlistment / 1e6), type = 'l', col = cols[2], lwd = lwd[2], xlab = NA, ylab = NA, axes = FALSE))
axis(side = 4)
mtext(ylabEnlist, side = 4, line = 3)
# comparing total federal spending and military spending
cols <- c(colFed, colMil)
xlab <- "Year"
ylabFed <- "Total Federal Spending (B $USD)"
ylabMil <- "Total Military Spending (B $USD)"
title <- "Federal and Military Spending"
lwd <- c(3, 3)
par(mar = c(5,5,2,5))
with(yearly, plot(Year, FedSpending.BUSD, type = 'l', col = cols[1], xlab = xlab, ylab = ylabFed, lwd = lwd[1], main = title))
par(new = TRUE)
with(yearly, plot(Year, MilitarySpending.BUSD, type = 'l', col = cols[2], xlab = NA, ylab = NA, lwd = lwd[2], main = title, axes = FALSE))
axis(side = 4)
mtext(ylabMil, side = 4, line = 3)
legend("topleft", col = cols, lwd = lwd, legend = c(ylabFed, ylabMil))
#############################
# format the data frames so they contain all historic data
#  and NAs for data we need to model
# loop through each year and append no-data to the data frames for years we will model
for (year in seq(startModelYear, endModelYear)){
# create the NA vectors to append
yearVec <- c(year, rep(NA, ncol(yearly) - 1))
enlistVec <- c(year, rep(NA, ncol(enlistment) - 1))
# append the new rows
yearly <- rbind(yearly, yearVec)
enlistment <- rbind(enlistment, enlistVec)
}
#############################
# set years we have historic data from
fitYears <- which(yearly$FedSpending.BUSD > 0)
# first, we'll look at what exponential federal spending looks like when fit to all data.
#  the exponential growth model is our null model because exponential growth underlies
#  the policies set by the federal reserve regarding growth of the money supply.
#  growth in money supply does not necessarily mean growth in fed spending, but it historically has.
fedSpending.exponential <- growth.exponential(yearly$Year[fitYears], yearly$FedSpending.BUSD[fitYears], degree = 2)
fedSpending.predicted.exp <- predict(fedSpending.exponential, data.frame(x = yearly$Year))
# calculate rmse for exponential growth
rmse.fedSpending.exp <- sqrt(mean(residuals(fedSpending.exponential)^2))
# plot the output
ylab <- "Total Federal Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (exponential) Federal Spending"
legend <- c("Actual Federal Spending", "Modeled Federal Spending", paste("RMSE:", format(rmse.fedSpending.exp, nsmall = 2)))
ylim <- c(min(yearly$FedSpending.BUSD, fedSpending.predicted.exp, na.rm = TRUE),
max(yearly$FedSpending.BUSD, fedSpending.predicted.exp, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$FedSpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, fedSpending.predicted.exp, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
fedSpending.logistic <- growth.logistic(yearly$Year, yearly$FedSpending.BUSD, maxSpending.fed, nrow(yearly))
fedSpending.predicted.log <- predict(fedSpending.logistic, data.frame(x = yearly$Year))
# calculate rmse for logistic growth
rmse.fedSpending.log <- sqrt(mean(residuals(fedSpending.logistic)^2))
# plot the output
ylab <- "Total Federal Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (logistic) Federal Spending"
legend <- c("Actual Federal Spending", "Modeled Federal Spending", paste("RMSE:", format(rmse.fedSpending.log, nsmall = 2)))
ylim <- c(min(yearly$FedSpending.BUSD, fedSpending.predicted.log, na.rm = TRUE),
max(yearly$FedSpending.BUSD, fedSpending.predicted.log, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$FedSpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, fedSpending.predicted.log, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
# first, exponential growth
milSpending.exponential <- growth.exponential(yearly$Year[fitYears], yearly$MilitarySpending.BUSD[fitYears], degree = 2)
milSpending.predicted.exp <- predict(milSpending.exponential, data.frame(x = yearly$Year))
# next, logistic growth
milSpending.logistic <- growth.logistic(yearly$Year, yearly$MilitarySpending.BUSD, maxSpending.mil, nrow(yearly))
milSpending.predicted.log <- predict(milSpending.logistic, data.frame(x = yearly$Year))
# get rmse for each
rmse.milSpending.exp <- sqrt(mean(residuals(milSpending.exponential)^2))
rmse.milSpending.log <- sqrt(mean(residuals(milSpending.logistic)^2))
# then plot the outputs
ylab <- "Total Military Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (exponential) Military Spending"
legend <- c("Actual Military Spending", "Modeled Military Spending", paste("RMSE:", format(rmse.milSpending.exp, nsmall = 2)))
ylim <- c(min(yearly$MilitarySpending.BUSD, milSpending.predicted.exp, na.rm = TRUE),
max(yearly$MilitarySpending.BUSD, milSpending.predicted.exp, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$MilitarySpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, milSpending.predicted.exp, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
legend <- c("Actual Military Spending", "Modeled Military Spending", paste("RMSE:", format(rmse.milSpending.log, nsmall = 2)))
ylim <- c(min(yearly$MilitarySpending.BUSD, milSpending.predicted.log, na.rm = TRUE),
max(yearly$MilitarySpending.BUSD, milSpending.predicted.log, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$MilitarySpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, milSpending.predicted.log, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
# first, exponential growth
vetSpending.exponential <- growth.exponential2(yearly$Year[fitYears], yearly$VeteranSpending.BUSD[fitYears], degree = 2)
vetSpending.predicted.exp <- predict(vetSpending.exponential, data.frame(x = yearly$Year))
# next, logistic growth
vetSpending.logistic <- growth.logistic2(yearly$Year, yearly$VeteranSpending.BUSD, maxSpending.vet, nrow(yearly))
vetSpending.predicted.log <- predict(vetSpending.logistic, data.frame(x = yearly$Year))
# get rmse for each
rmse.vetSpending.exp <- sqrt(mean(residuals(vetSpending.exponential)^2))
rmse.vetSpending.log <- sqrt(mean(residuals(vetSpending.logistic)^2))
# then plot the outputs
ylab <- "Total Veteran Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (exponential) Veteran Spending"
legend <- c("Actual Veteran Spending", "Modeled Veteran Spending", paste("RMSE:", format(rmse.vetSpending.exp, nsmall = 2)))
ylim <- c(min(yearly$VeteranSpending.BUSD, vetSpending.predicted.exp, na.rm = TRUE),
max(yearly$VeteranSpending.BUSD, vetSpending.predicted.exp, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$VeteranSpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, vetSpending.predicted.exp, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
vetSpending.exponential <- growth.exponential(yearly$Year[fitYears], yearly$VeteranSpending.BUSD[fitYears], degree = 2)
vetSpending.predicted.exp <- predict(vetSpending.exponential, data.frame(x = yearly$Year))
# next, logistic growth
vetSpending.logistic <- growth.logistic(yearly$Year, yearly$VeteranSpending.BUSD, maxSpending.vet, nrow(yearly))
vetSpending.predicted.log <- predict(vetSpending.logistic, data.frame(x = yearly$Year))
# get rmse for each
rmse.vetSpending.exp <- sqrt(mean(residuals(vetSpending.exponential)^2))
rmse.vetSpending.log <- sqrt(mean(residuals(vetSpending.logistic)^2))
# then plot the outputs
ylab <- "Total Veteran Spending (B $USD)"
xlab <- "Year"
title <- "Actual and Modeled (exponential) Veteran Spending"
legend <- c("Actual Veteran Spending", "Modeled Veteran Spending", paste("RMSE:", format(rmse.vetSpending.exp, nsmall = 2)))
ylim <- c(min(yearly$VeteranSpending.BUSD, vetSpending.predicted.exp, na.rm = TRUE),
max(yearly$VeteranSpending.BUSD, vetSpending.predicted.exp, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$VeteranSpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, vetSpending.predicted.exp, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
legend <- c("Actual Military Spending", "Modeled Military Spending", paste("RMSE:", format(rmse.vetSpending.log, nsmall = 2)))
ylim <- c(min(yearly$VeteranSpending.BUSD, vetSpending.predicted.log, na.rm = TRUE),
max(yearly$VeteranSpending.BUSD, vetSpending.predicted.log, na.rm = TRUE))
lwd <- c(3, 3, NA)
plot(yearly$Year, yearly$VeteranSpending.BUSD, type = 'l', col = colReal, xlab = xlab, ylab = ylab, lwd = lwd[1], ylim = ylim, main = title)
par(new = TRUE)
plot(yearly$Year, vetSpending.predicted.log, type = 'l', col = colPred, xlab = NA, ylab = NA, lwd = lwd[2], ylim = ylim, axes = FALSE)
legend("topleft", legend = legend, col = c(colReal, colPred, NA), lwd = lwd)
unemployment.mean <- mean(yearly$UnemploymentRate[unemployment.years])
unemployment.sd <- sd(yearly$UnemploymentRate[unemployment.years])
# run framework 1
framework1 <- unemployment.framework1(yearly, unemployment.sd)
# run framework 2
framework2 <- unemployment.framework2(yearly, unemployment.sd)
# run framework 3
framework3 <- unemployment.framework3(yearly, unemployment.sd)
unemployment.years <- which(dframe$UnemploymentRate < 1.)
unemployment.yearsToModel <- is.na(dframe$UnemploymentRate)
unemployment.mean <- mean(yearly$UnemploymentRate[unemployment.years])
unemployment.sd <- sd(yearly$UnemploymentRate[unemployment.years])
unemployment.years <- which(yearly$UnemploymentRate < 1.)
unemployment.yearsToModel <- is.na(yearly$UnemploymentRate)
unemployment.mean <- mean(yearly$UnemploymentRate[unemployment.years])
unemployment.sd <- sd(yearly$UnemploymentRate[unemployment.years])
# run framework 1
framework1 <- unemployment.framework1(yearly, unemployment.sd)
# run framework 2
framework2 <- unemployment.framework2(yearly, unemployment.sd)
# run framework 3
framework3 <- unemployment.framework3(yearly, unemployment.sd)
framework3
loss.rmse(yearly$UnemploymentRate[unemployment.years], framework1[unemployment.years])
yearly$UnemploymentRate[unemployment.years]
framework1[unemployment.years]
unemployment.framework1 <- function(dframe, sd){
# get basic unemployment info
unemployment.years <- which(dframe$UnemploymentRate < 1.)
unemployment.mean <- mean(dframe$UnemploymentRate[unemployment.years])
# generate some noise
noise <- rnorm(nrow(dframe), sd = sd)
# add the noise to the mean
framework1 = unemployment.mean + noise
return(framework1)
}
framework1 <- unemployment.framework1(yearly, unemployment.sd)
loss.rmse(yearly$UnemploymentRate[unemployment.years], framework1[unemployment.years])
loss.rmse(yearly$UnemploymentRate[unemployment.years], framework2[unemployment.years])
loss.rmse(yearly$UnemploymentRate[unemployment.years], framework3[unemployment.years])
rmsMat = matrix(nrow=100, ncol=3)
for (i in seq(1,100)){}
for (i in seq(1,100)){
framework1 <- unemployment.framework1(yearly, unemployment.sd)
framework2 <- unemployment.framework2(yearly, unemployment.sd)
framework3 <- unemployment.framework3(yearly, unemployment.sd)
rmsMat[i,1] <- loss.rmse(yearly$UnemploymentRate[unemployment.years], framework1[unemployment.years])
rmsMat[i,2] <- loss.rmse(yearly$UnemploymentRate[unemployment.years], framework2[unemployment.years])
rmsMat[i,3] <- loss.rmse(yearly$UnemploymentRate[unemployment.years], framework3[unemployment.years])
}
mean(rmsMat, 1)
mean(rmsMat, 2)
mean(rmsMat, 3)
?mean
mean(rmsMat[,1])
mean(rmsMat[,2])
mean(rmsMat[,3])
